# Windows dotfiles
# All dotfile directories that must exist
- name: dotfiles - Create user software config directories if it does not exist of target user
  ansible.windows.win_file:
    path: "{{ item }}"
    state: directory
  tags: ['dotfiles']
  with_items: "{{ dotfiles_directories }}"

# Remove any dotfiles in different locations if they exist already
# These files might have been automatically generated when a program was run before
# This step prevent extra dotfiles conflicting with the latest ones set up in this task
- name: dotfiles - Remove any dotfiles in different locations if they exist already
  ansible.windows.win_file:
    path: "{{ item }}"
    state: absent
  tags: ['dotfiles']
  with_items: "{{ dotfiles_to_be_removed }}"

- name: dotfiles - Sync user dotfiles, scripts
  ansible.windows.win_copy:
    # src with "/"" only copies files in src directory to dest directory
    # use src without "/" to copy directory itself
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  tags: ['dotfiles']
  loop: "{{ dotfiles_items }}"

- name: dotfiles - Sync Hunspell dictionaries with Libreoffice dictionaries on Windows
  ansible.windows.win_copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  tags: ['dotfiles']
  loop: "{{ hunspell_dictionaries }}"

- name: dotfiles - add directories to PATH if they do not exist already
  ansible.windows.win_path:
    name: PATH
    elements:
    - C:\Users\{{ target_user }}\usr\bin
    - C:\ProgramData\chocolatey\bin
    - C:\Program Files\Git\bin
    scope: user
    state: present

# Windows environment configuration
- name: "Set target_user environment variables"
  ansible.windows.win_environment:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    #  Set for current Ansible user
    level: user
  loop: "{{ environment_variables }}"
  tags: ['dotfiles', 'emacs']

# TODO plantuml JAR set up per Linux emacs setup

# PSReadline requirements:
# Ensure NuGet Package Provider is installed as latest version
# Ensure Powershell Gallery is installed
#- name: dotfiles - Install Powershell Gallery
#  ansible.windows.win_shell: |
#    Install-Module -Name PowerShellGet -Force
#    Install-Module -Name PackageManagement -Force
#    Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
#  tags: ['dotfiles', 'powershell']

# Install PSReadline module from PSGallery
- name: dotfiles - Add a PowerShell module PSReadline
  community.windows.win_psmodule:
    name: PSReadline
    repository: PSGallery
    state: latest
    accept_license: true
  tags: ['dotfiles', 'powershell']

# Install PSFzf module from PSGallery
- name: dotfiles - Add PowerShell modules
  community.windows.win_psmodule:
    name: "{{ item }}"
    repository: PSGallery
    state: latest
  loop:
    - PSFzf
    - CompletionPredictor
    - Az.Accounts
    - Az.Tools.Predictor
  tags: ['dotfiles', 'powershell']
  # Allow errors due to CompletionPredictor module
  ignore_errors: yes
