# All dotfile directories that must exist
- name: dotfiles - Create user binaries, templates, user share apps, configuration directories for target user if they do not exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    # User can rwx
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: "744"
  with_items: "{{ dotfiles_directories }}"
  tags: ['dotfiles']

# Remove any dotfiles in different locations if they exist already
# These files might have been automatically generated when a program was run before
# This step prevent extra dotfiles conflicting with the latest ones set up in this task
- name: dotfiles - Remove any dotfiles in different locations if they exist already
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ dotfiles_to_be_removed }}"
  tags: ['dotfiles']
  become: true
  become_user: "{{ target_user }}"

###################################################################################################
# Adapted from https://github.com/geerlingguy/ansible-role-dotfiles/blob/master/tasks/main.yml
# Under MIT License

- name: Ensure dotfiles repository is cloned locally.
  ansible.builtin.git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles_repo_local_destination }}"
    version: "{{ dotfiles_repo_version }}"
    accept_hostkey: "{{ dotfiles_repo_accept_hostkey }}"
  become: true
  become_user: "{{ target_user }}"
  ignore_errors: true
  tags: ['dotfiles', 'dotfiles-symlink']

- name: Ensure all configured dotfiles are links.
  ansible.builtin.command: "ls -F {{ dotfiles_home }}/{{ item }}"
  register: existing_dotfile_info
  failed_when: false
  check_mode: false
  changed_when: false
  with_items: "{{ dotfiles_files }}"
  tags: ['dotfiles', 'dotfiles-symlink']
  become: true
  become_user: "{{ target_user }}"

- name: Remove existing dotfiles file if a replacement is being linked.
  ansible.builtin.file:
    path: "{{ dotfiles_home }}/{{ dotfiles_files[item.0] }}"
    state: absent
  when: "'@' not in item.1.stdout"
  with_indexed_items: "{{ existing_dotfile_info.results }}"
  become: true
  become_user: "{{ target_user }}"
  tags: ['dotfiles', 'dotfiles-symlink']

- name: Link dotfiles into home folder.
  ansible.builtin.file:
    src: "{{ dotfiles_repo_local_destination }}/{{ item }}"
    dest: "{{ dotfiles_home }}/{{ item }}"
    state: link
    mode: 0644
  become: true
  become_user: "{{ target_user }}"
  with_items: "{{ dotfiles_files }}"
  tags: ['dotfiles', 'dotfiles-symlink']

# End geerlinguy ansible role adaptation
###################################################################################################

- name: dotfiles - Ensure symlink binaries and directories are executable
  ansible.builtin.file:
    path: "{{ dotfiles_repo_local_destination }}/{{ item }}"
    mode: "0744"
  become: true
  become_user: "{{ target_user }}"
  with_items: "{{ dotfiles_files_binaries }}"
  tags: ['dotfiles', 'dotfiles-symlink-binaries']

# Force create symlink to ~/Code/External/todo.txt-cli/todo.sh from ~/usr/bin
- name: dotfiles - Force create symlink to latest todo.sh
  ansible.builtin.file:
     src: "/home/{{ target_user }}/Code/External/todo.txt-cli/todo.sh"
     dest: "/home/{{ target_user }}/usr/bin/todo.sh"
     state: link
     force: yes
     owner: "{{ target_user }}"
     group: "{{ target_user }}"
  tags: ['dotfiles', 'symlink']

# Create ~/.config/mpv directory if it does not exist of target user
- name: dotfiles - Create ~/.config/mpv directory if it does not exist of target user
  ansible.builtin.file:
    path: /home/{{ target_user }}/.config/mpv
    state: directory
    # User can rw
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: "744"
  tags: ['dotfiles']
  when: configure_mpv

# Copy dolphinrc to ~/.config/dolphinrc
# dotfile is copied by Ansible instea of symlink due to frequent changes to the file
# when Dolphin is opened and window position variables are changed
- name: dotfiles - Copy dolphinrc from dotfiles repository to ~/.config/dolphinrc
  ansible.builtin.copy:
    src: "{{ dotfiles_repo_local_destination }}/.config/dolphinrc"
    dest: "/home/{{ target_user }}/.config/dolphinrc"
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: "0644"
  tags: ['dotfiles', 'dolphin']
  when: configure_dolphin

# Force create symlinks to ~/Code/External/mpv-osc-tethys from ~/.config/mpv/scripts
- name: dotfiles - Force create symlink to latest mpv tethys theme files
  ansible.builtin.file:
     src: "{{ item.src }}"
     dest: "{{ item.dest }}"
     state: link
     force: yes
     owner: "{{ target_user }}"
     group: "{{ target_user }}"
  tags: ['dotfiles', 'symlink']
  loop:
    - { src: '/home/{{ target_user }}/Code/External/mpv-osc-tethys/osc_tethys.lua', dest: '/home/{{ target_user }}/.config/mpv/scripts/osc_tethys.lua' }
    - { src: '/home/{{ target_user }}/Code/External/mpv-osc-tethys/mpv_thumbnail_script_server.lua', dest: '/home/{{ target_user }}/.config/mpv/scripts/mpv_thumbnail_script_server.lua' }
  when: configure_mpv

# Check if Clamd is installed
- name: dotfiles - Check if Clamd is installed
  ansible.builtin.stat:
    path: /usr/bin/clamd
  register: clamd_installed
  tags: ['dotfiles']

# Copy ClamAV clamd.conf to /etc/clamav/clamd.conf
- name: dotfiles - Copy ClamAV clamd.conf to /etc/clamav/clamd.conf
  ansible.builtin.copy:
    src: "{{ dotfiles_overlay_dir }}/other/etc/clamav/clamd.conf"
    dest: /etc/clamav/clamd.conf
    owner: root
    group: root
    mode: "0644"
  tags: ['dotfiles']
  when: clamd_installed.stat.exists

# Copy ClamAV freshclam.conf to /etc/clamav/freshclam.conf
- name: dotfiles - Copy ClamAV freshclam.conf to /etc/clamav/freshclam.conf
  ansible.builtin.copy:
    src: "{{ dotfiles_overlay_dir }}/other/etc/clamav/freshclam.conf"
    dest: /etc/clamav/freshclam.conf
    owner: clamav
    group: adm
    mode: "0444"
  tags: ['dotfiles']
  when: clamd_installed.stat.exists
